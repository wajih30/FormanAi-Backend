import openai
import os
import logging
from dotenv import load_dotenv


# Load environment variables from .env file
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# Set up logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.FileHandler('openai_service.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

def generate_chatgpt_response(prompt, model="gpt-4", temperature=0.5, max_tokens=1500):
    """
    Generate a response from OpenAI's GPT-4 given a specific prompt.

    Args:
    - prompt (str): The prompt to pass to OpenAI.
    - model (str): The OpenAI model to use (default: 'gpt-4').
    - temperature (float): Controls randomness in output (default: 0.5).
    - max_tokens (int): Max tokens to generate (default: 1500).

    Returns:
    - str: The response generated by OpenAI.
    """
    try:
        logger.info("Generating response from OpenAI for given prompt.")
        response = openai.chat.completions.create(  # Corrected method
            model=model,
            messages=[
                {"role": "system", "content": "You are an academic advisor bot."},
                {"role": "user", "content": prompt}
            ],
            temperature=temperature,
            max_tokens=max_tokens
        )
        return response.choices[0].message.content.strip()  # Correct way to access the message content

    except Exception as e:
        logger.error(f"Error generating OpenAI response: {str(e)}")
        return f"An error occurred: {str(e)}"
